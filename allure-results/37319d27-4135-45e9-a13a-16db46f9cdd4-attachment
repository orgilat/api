# Test info

- Name: u,תFתת
- Location: C:\Users\User\Documents\k6try\tests\api.spec.ts:94:7

# Error details

```
Error: expect(locator).toContainText(expected)

Locator: locator('//div[@class="page-title"]//span[1]')
Expected string: "כללי השתתפות לפי סוג יחידה"
Received string: "ניהול סוציומטרי"
Call log:
  - expect.toContainText with timeout 190000ms
  - waiting for locator('//div[@class="page-title"]//span[1]')
    23 × locator resolved to <span title="">ניהול סוציומטרי</span>
       - unexpected value "ניהול סוציומטרי"

    at FlowPage.eleven (C:\Users\User\Documents\k6try\pages\FlowPage.ts:278:29)
    at C:\Users\User\Documents\k6try\tests\api.spec.ts:100:22
    at Function.step (C:\Users\User\Documents\k6try\node_modules\allure-playwright\src\helpers.ts:21:17)
    at C:\Users\User\Documents\k6try\tests\api.spec.ts:99:18
```

# Test source

```ts
  178 |     await this.page.waitForTimeout(200); // עוד זמן קטן
  179 |     await this.page.keyboard.type('מרינה 2025', { delay: 150 });
  180 |     await expect(this.eventNameInput).toHaveValue('מרינה 2025', { timeout: 5000 });
  181 |
  182 |
  183 |     await expect(this.eventNameInput).toHaveValue('מרינה 2025', { timeout: 5000 });
  184 |
  185 |
  186 |     await this.seasonDropdown.click();
  187 |     await this.seasonOption.click();
  188 |     // הוספת בחירת עונה כאן אם צריך
  189 |
  190 |     // בחירת תאריך התחלה
  191 |     await this.startDateButton.click();
  192 |     await this.page.keyboard.press('Enter');   // בחירת תאריך סיום
  193 |     await this.endDateButton.click();
  194 |     await this.page.keyboard.press('Enter');
  195 |     await this.recruit.click();
  196 |     await this.recruitOption.click();
  197 |     logger.info('we came to the end');
  198 |     await this.mateS.click();
  199 |     logger.info('worked');
  200 |     await this.mateC.click();
  201 |     await this.pikud1.click();
  202 |     logger.info('פיקוד אחד נלחץ');
  203 |     await this.page.waitForTimeout(2000)
  204 |     await this.page.locator('div:nth-child(18) > .dx-treeview-with-search > .dx-scrollable > .dx-scrollable-wrapper > .dx-scrollable-container > .dx-scrollable-content > ul > li > .dx-treeview-node-container > li > .dx-widget').first().click();
  205 |     logger.info('אוגדה 1 נלחצה');
  206 |     await this.page.waitForTimeout(2500);
  207 |     await this.end1.scrollIntoViewIfNeeded();  // הגלילה כדי לוודא שהאלמנט גלוי
  208 |     await this.end1.click({ force: true });
  209 |     await this.page.waitForTimeout(2500);
  210 |   
  211 |     await this.end3.scrollIntoViewIfNeeded();  // הגלילה כדי לוודא שהאלמנט גלוי
  212 |     await this.end3.click({ force: true });
  213 |     await this.page.waitForTimeout(2500);
  214 |     await this.final.scrollIntoViewIfNeeded();  // הגלילה כדי לוודא שהאלמנט גלוי
  215 |     await this.final.click({ force: true });
  216 |     await this.page.waitForTimeout(2500);
  217 |     await this.calculate.click();
  218 |     await this.show.click();
  219 |     await this.f1.waitFor({ state: 'visible' });
  220 |     await this.f1.click();
  221 |     await this.f2.waitFor({ state: 'visible' });
  222 |     await this.f2.click();
  223 |     await this.f4.waitFor({ state: 'visible' });
  224 |     await this.f4.click();
  225 |     await this.show1.waitFor({ state: 'visible' });
  226 |     await this.show1.click();
  227 |   }
  228 |   async six() {
  229 |
  230 |  await this.all.nth(0).click()
  231 |  await expect(this.must).toBeVisible()
  232 |  await expect(this.must2).toBeVisible()
  233 |
  234 | }
  235 | async seven() {
  236 |
  237 |   await this.all.nth(1).click()
  238 |   await expect(this.must3).toBeVisible()
  239 |   await expect(this.must3).toContainText("קביעת שאלות חובה")
  240 |   await expect(this.must4).toBeVisible()
  241 |   await expect(this.must5).toBeVisible()
  242 |  }
  243 |  async eight() {
  244 |
  245 |   await this.all.nth(2).click()
  246 |   await expect(this.must3).toContainText("שדות לניהול פוטנציאל")
  247 |   await expect(this.must6).toBeVisible()
  248 |   await expect(this.must6).toContainText("סוציומטרי")
  249 |   await expect(this.must7).toContainText("מספר אישי")
  250 |  
  251 | }
  252 |  async nine() {
  253 |
  254 |   await this.all.nth(3).click()
  255 |   await expect(this.must3).toContainText("קביעת חוקים לבדיקת שאלונים לא תקינים: ")
  256 |   await expect(this.must5).toBeVisible()
  257 |   await expect(this.must8).toBeVisible()
  258 |   await this.must8.click()
  259 |   await expect(this.page).toHaveURL('https://www.survey.co.il/pms/MMDANEW/sm_minMaxAnswerRules.asp');
  260 |
  261 |  
  262 |  }
  263 |  async ten() {
  264 |
  265 |   await this.all.nth(4).click()
  266 |   await expect(this.must9).toBeVisible()
  267 |   await this.must9.click()
  268 |   const count = await this.must10.count();
  269 |   await expect(count).toBe(24);
  270 |   await expect(this.must11).toBeVisible()
  271 |
  272 |
  273 |  
  274 |  }
  275 |
  276 |  async eleven() {
  277 | await this.all.nth(5).click()
> 278 |    await expect(this.must3).toContainText("כללי השתתפות לפי סוג יחידה")
      |                             ^ Error: expect(locator).toContainText(expected)
  279 |    await expect(this.must4).toBeVisible()
  280 |    const value = await this.must14.textContent();
  281 |    expect(value).toBe("or")
  282 |
  283 |
  284 |  
  285 |  }
  286 |
  287 |
  288 |
  289 |
  290 |
  291 |
  292 |
  293 |
  294 |
  295 |
  296 |
  297 |
  298 |
  299 |
  300 |
  301 |
  302 |
  303 |
  304 |
  305 |
  306 |
  307 |
  308 |
  309 |
  310 |
  311 |
  312 |
  313 |
  314 |
  315 |
  316 |
  317 |
  318 |
  319 |
  320 |
  321 |
  322 |
  323 |
  324 |
  325 |
  326 |
  327 |
  328 |
  329 |
  330 |
  331 |
  332 |
  333 |
  334 |
  335 |
  336 |
  337 |
  338 |
  339 |
  340 |
  341 |
  342 |
  343 |  async ele() {
  344 |   await this.all.nth(5).click();
  345 |   await expect(this.must3).toContainText("כללי השתתפות ");
  346 |   const screenshotPath = path.resolve('C:\\Users\\User\\Documents\\k6try\\screenshots\\ele_actual.png');
  347 |   await this.page.screenshot({ path: screenshotPath, clip: { x: 0, y: 0, width: await this.page.evaluate(() => window.innerWidth), height: 1000 } });
  348 |
  349 |   // טען את תמונת ה-expected הקיימת
  350 |   const expectedPath = path.resolve('C:\\Users\\User\\Documents\\k6try\\screenshots\\ele.png');
  351 |   const expectedImage = PNG.sync.read(fs.readFileSync(expectedPath));
  352 |   const actualImage = PNG.sync.read(fs.readFileSync(screenshotPath));
  353 |
  354 |   const { width, height } = expectedImage;
  355 |   const diff = new PNG({ width, height });
  356 |
  357 |   // השווה בין התמונות
  358 |   const diffPixels = pixelmatch(expectedImage.data, actualImage.data, diff.data, width, height, { threshold: 0.1 });
  359 |
  360 |   // בדוק שאין הבדל (תפסיק אם יש הבדל)
  361 |   expect(diffPixels, `יש הבדל של ${diffPixels} פיקסלים בין התמונה הצפויה לפועלית`).toBe(0);
  362 | };
  363 | async compareScreenshots(start: number, end: number) {
  364 |   for (let i = start; i <= end; i++) {
  365 |     await this.all.nth(i).click();
  366 |
  367 |     const screenshotPath = path.resolve(`C:\\Users\\User\\Documents\\k6try\\screenshots\\twohalve_actual_${i}.png`);
  368 |     const expectedPath = path.resolve(`C:\\Users\\User\\Documents\\k6try\\screenshots\\twohalve_${i}.png`);
  369 |
  370 |     const width = await this.page.evaluate(() => window.innerWidth);
  371 |     const height = await this.page.evaluate(() => window.innerHeight);
  372 |     
  373 |     
  374 |     await this.page.screenshot({ path: screenshotPath, clip: { x: 0, y: 0, width, height } });
  375 |
  376 |     const expectedImage = PNG.sync.read(fs.readFileSync(expectedPath));
  377 |     const actualImage = PNG.sync.read(fs.readFileSync(screenshotPath));
  378 |
```