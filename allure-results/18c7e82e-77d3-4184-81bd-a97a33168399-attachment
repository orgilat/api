# Test info

- Name: u,תFbfffzzfffתת
- Location: C:\Users\User\Documents\k6try\tests\api.spec.ts:168:10

# Error details

```
Error: expect(locator).toContainText(expected)

Locator: locator('//div[@class="page-title"]//span[1]')
Expected string: "ניהול הרשאות משתמשים"
Received: <element(s) not found>
Call log:
  - expect.toContainText with timeout 190000ms
  - waiting for locator('//div[@class="page-title"]//span[1]')

    at FlowPage.eleven11 (C:\Users\User\Documents\k6try\pages\FlowPage.ts:384:29)
    at C:\Users\User\Documents\k6try\tests\api.spec.ts:174:7
    at C:\Users\User\Documents\k6try\tests\api.spec.ts:173:5
```

# Test source

```ts
  284 |  async ten() {
  285 |
  286 |   await this.all.nth(4).click()
  287 |   await expect(this.must9).toBeVisible()
  288 |   await this.must9.click()
  289 |   const count = await this.must10.count();
  290 |   await expect(count).toBe(24);
  291 |   await expect(this.must11).toBeVisible()
  292 |
  293 |
  294 |  
  295 |  }
  296 |
  297 |  async eleven() {
  298 |    await this.all.nth(5).click()
  299 |    await expect(this.must3).toContainText("כללי השתתפות לפי סוג יחידה")
  300 |    await expect(this.must4).toBeVisible()
  301 |    const value = await this.must14.textContent();
  302 |    expect(value).toBe("שדה")
  303 |    const value2 = await this.must15.textContent();
  304 |    expect(value2).toBe("מטה")
  305 |
  306 |  
  307 |  }
  308 |
  309 |  async eleven2() {
  310 |    await this.all.nth(6).click()
  311 |    await expect(this.must3).toContainText("הגדרת השדות שיופיעו בטבלאות")
  312 |    await expect(this.table).toBeVisible()
  313 |    await expect(this.must17).toBeVisible()
  314 |
  315 |  
  316 |  }
  317 |  async eleven3() {
  318 |    await this.all.nth(7).click()
  319 |    await expect(this.must3).toContainText("אופציות שונות לניהול מינ מקס לבחירת היגדים וכללים שונים")
  320 |    await expect(this.table2).toBeVisible()
  321 |
  322 |
  323 |  
  324 |  }
  325 |  async eleven4() {
  326 |    await this.all.nth(8).click()
  327 |    await expect(this.must3).toContainText("הגדרה וניהול סטטוסים לאירועים")
  328 |    await expect(this.table).toBeVisible()
  329 |
  330 |  
  331 |  }
  332 |
  333 |
  334 |
  335 |  async eleven6() {
  336 |    await this.all.nth(9).click()
  337 |    await expect(this.must3).toContainText("סיבות להוספת או הסרת משתתפים באירוע סוציומטרי")
  338 |    await expect(this.table).toBeVisible()
  339 |    await expect(this.submitButton).toBeVisible()
  340 |  
  341 |  }
  342 | async eleven7() {
  343 |    await this.all.nth(10).click()
  344 |    await expect(this.must3).toContainText("כמות היגדים נדרשים למילוי כתלות בתשובה בהיגד ספציפי כגון מידת היכרות")
  345 |    await expect(this.table).toBeVisible()
  346 |
  347 |  }
  348 | async eleven8() {
  349 |    await this.all.nth(11).click()
  350 |    await expect(this.must3).toContainText("רשימת אשכולות")
  351 |    const a = await this.kpi.inputValue();
  352 |    expect(a).toContain("אשכולות");
  353 |    const ab = await this.kpi2.inputValue();
  354 |    expect(ab).toContain("הגדרת מענה");
  355 |    await expect(this.table3).toBeVisible()
  356 |    await expect(this.table4).toBeVisible()
  357 |    const abc = await this.table4.inputValue();
  358 |    expect(abc).toContain("אשכול חדש");
  359 |
  360 |
  361 |  }
  362 |
  363 |  async eleven9() {
  364 |    await this.all.nth(12).click()
  365 |    await expect(this.must3).toContainText("העברת משיבים ממאגר פוטנציאלי למאגר פעיל ולהיפך")
  366 |    await expect(this.all).toBeVisible()
  367 |    const a=await this.table5.count()
  368 |    expect(a).toBe(46)
  369 |    await expect(this.must4).toBeVisible()
  370 |
  371 |  }
  372 |   async eleven10() {
  373 |    await this.all.nth(13).click()
  374 |    await expect(this.must3).toContainText("ניהול הרשאות משתמשים")
  375 |    await expect(this.all).toBeVisible()
  376 |    const a=await this.table5.count()
  377 |    expect(a).toBe(46)
  378 |    await expect(this.must4).toBeVisible()
  379 |
  380 |  }
  381 |
  382 |   async eleven11() {
  383 |    await this.all.nth(14).click()
> 384 |    await expect(this.must3).toContainText("ניהול הרשאות משתמשים")
      |                             ^ Error: expect(locator).toContainText(expected)
  385 |    await expect(this.submitButton).toBeVisible()
  386 |    await expect(this.all).toBeVisible()
  387 |    // ניגש לאלמנט לפי ID (כמו בדוגמה שלך)
  388 |    const dateInput = this.page.locator('#dateFrom');
  389 |
  390 | // קולטים את הערך מתוך השדה
  391 |     const inputValue = await dateInput.inputValue();
  392 |
  393 | // מייצרים את התאריך של היום בפורמט dd/MM/yyyy
  394 | const today = new Date();
  395 | const day = String(today.getDate()).padStart(2, '0');
  396 | const month = String(today.getMonth() + 1).padStart(2, '0');
  397 | const year = today.getFullYear();
  398 | const todayFormatted = `${day}/${month}/${year}`;
  399 |
  400 | // משווים בין התאריך שבשדה לתאריך של היום
  401 | expect(inputValue).toBe(todayFormatted);
  402 |
  403 |
  404 |  }
  405 |
  406 |
  407 |
  408 |
  409 |
  410 |
  411 |
  412 |
  413 |
  414 |
  415 |
  416 |
  417 |
  418 |
  419 |
  420 |
  421 |
  422 |
  423 |
  424 |
  425 |
  426 |
  427 |
  428 |
  429 |
  430 |
  431 |
  432 |
  433 |
  434 |
  435 |
  436 |
  437 |
  438 |
  439 |
  440 |
  441 |
  442 |
  443 |
  444 |
  445 |
  446 |
  447 |
  448 |
  449 |
  450 |
  451 |
  452 |
  453 |  async ele() {
  454 |   await this.all.nth(5).click();
  455 |   await expect(this.must3).toContainText("כללי השתתפות ");
  456 |   const screenshotPath = path.resolve('C:\\Users\\User\\Documents\\k6try\\screenshots\\ele_actual.png');
  457 |   await this.page.screenshot({ path: screenshotPath, clip: { x: 0, y: 0, width: await this.page.evaluate(() => window.innerWidth), height: 1000 } });
  458 |
  459 |   // טען את תמונת ה-expected הקיימת
  460 |   const expectedPath = path.resolve('C:\\Users\\User\\Documents\\k6try\\screenshots\\ele.png');
  461 |   const expectedImage = PNG.sync.read(fs.readFileSync(expectedPath));
  462 |   const actualImage = PNG.sync.read(fs.readFileSync(screenshotPath));
  463 |
  464 |   const { width, height } = expectedImage;
  465 |   const diff = new PNG({ width, height });
  466 |
  467 |   // השווה בין התמונות
  468 |   const diffPixels = pixelmatch(expectedImage.data, actualImage.data, diff.data, width, height, { threshold: 0.1 });
  469 |
  470 |   // בדוק שאין הבדל (תפסיק אם יש הבדל)
  471 |   expect(diffPixels, `יש הבדל של ${diffPixels} פיקסלים בין התמונה הצפויה לפועלית`).toBe(0);
  472 | };
  473 | async compareScreenshots(start: number, end: number) {
  474 |   for (let i = start; i <= end; i++) {
  475 |     await this.all.nth(i).click();
  476 |
  477 |     const screenshotPath = path.resolve(`C:\\Users\\User\\Documents\\k6try\\screenshots\\twohalve_actual_${i}.png`);
  478 |     const expectedPath = path.resolve(`C:\\Users\\User\\Documents\\k6try\\screenshots\\twohalve_${i}.png`);
  479 |
  480 |     const width = await this.page.evaluate(() => window.innerWidth);
  481 |     const height = await this.page.evaluate(() => window.innerHeight);
  482 |     
  483 |     
  484 |     await this.page.screenshot({ path: screenshotPath, clip: { x: 0, y: 0, width, height } });
```